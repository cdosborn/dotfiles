#! /usr/bin/env bash

#  echo -e "a\nb\n" |  take 2
#  > b
function take {
    awk "NR == $1 { print; exit 0; }";
}

# echo "abcd" | from 1 2
# > "bc"
function from() {
    head -c $2 | tail -c $(($2 - $1));
}

function join {
    tr -d "\n"
}

function ju {
    cd $(find . -type d | fzf)
}

function ? {
    test $@ && echo true;
}

function debugger {
    sed -i 's:// debugger:debugger:' $@
}

function nodebugger {
    sed -i 's:^\( *\)debugger:\1// debugger:' $@
}

function get_ps1 {
    tput -S <<< "
        cup 0 0
        el
        cup 1 0
        el
        cup 0 0
    "
    host=$(hostname)
    host=${host%%.*}

    width=$(tput cols)

    ls -pt -G | xargs > /tmp/blah
    lines=$(wc -l < /tmp/blah )
    echo $lines
    tput -S <<< "
        cup $(( $lines + 2 )) 0
        el
        cup 0 0
    "
    if [ $(whoami) == "root" ]; then
        symb="■"
    else
        symb="●"
    fi

    cat /tmp/blah | gawk '
    BEGIN {
        "tput cols" | getline width
        "date" | getline date
        printf "┏"
        w = width
        dateLength = length(date);
        while (--w > dateLength + 2) {
            printf "━";
        }
        printf date
        printf "━┓\n"
    }
    {
        w = width - 4;
        printf "┃ %-"w"s ┃\n", substr($0, 0, length($0))
    }
    END {
        printf "┗"
        w = width
        while (--w > 1) {
            printf "━";
        }
        printf "┛\n"
    }
    '

    echo "$host..$(basename $(pwd))/$symb "
}

function 9man {
    if [[ $# -eq 0 ]]; then
        man
        return
    fi
    cat $(/usr/bin/env man $@ -w) | 9 troff -N -mantimes | 9 sed '
            ${
                    /^$/p
            }
            //N
            /^\n$/D
    ' | less
}

function args {
    while [ $# -gt 0 ]; do
        echo "'$1'";
        shift;
    done;
}

#
# ve NAME           creates and activates venv
# ve wipe           remove and deactivate current venv
# ve wipe NAME...   remove multiple venvs
# ve list           print all venvs
#
function ve {
    #
    # Use $VE_DIR it it exists in env
    #
    local VE_DIR="${VE_DIR:-$HOME/.ve}"

    if [ ! -x "$(which virtualenv)" ]; then
        echo "virtualenv is not installed";
        return;
    fi;

    case $1 in
    "" )
        echo "ve wipe [NAME...]  Erase virtual envs";
        echo "ve list   List all virtual envs";
        echo "ve NAME   Create or activate virtual env";
        ;;
    "wipe" )

        shift;

        #
        # ve wipe w/o arguments removes current venv
        #
        if [ "$#" -eq 0 -a -d "$VIRTUAL_ENV" ]; then
            rm -rf "$VIRTUAL_ENV";
        fi;

        #
        # ve wipe with arguments removes each argument
        #
        local VENVS="$(ve list)"
        for ENV in $@; do
            local DIR="$VE_DIR/$ENV";
            if [[ "$VENVS" =~ "$ENV" ]] && [ -d "$DIR" ]; then
                rm -rf "$DIR";
            fi;
        done

        #
        # ve wipe deactivates an activated but deleted venv
        #
        if [ "$VIRTUAL_ENV" -a ! -d "$VIRTUAL_ENV" ]; then
            deactivate;
        fi;

        ;;
    "list" )
        if [ ! -d "$VE_DIR" ]; then
            mkdir "$VE_DIR";
        fi;
        ls -1 "$VE_DIR";
        ;;
    * )

        #
        # ve NAME deactivates, creates if necessary, then activates
        #
        if [ -d "$VIRTUAL_ENV" ]; then
            deactivate;
        fi;

        if [ ! -d "$VE_DIR/$1" ]; then
            virtualenv "$VE_DIR/$1";
        fi;

        if [ -e "$VE_DIR/$1/bin/activate" ]; then
            . "$VE_DIR/$1/bin/activate";
        fi
        ;;
    esac
}

pyenv() {
  PYENV_PATH="${HOME}/.pyenv/shims"
  if [[ ! "${PATH}" =~ "${PYENV_PATH}" ]]; then
      export PATH="${PYENV_PATH}:${PATH}"
  fi
  export PYENV_SHELL=bash
  command pyenv rehash 2>/dev/null

  local command
  command="$1"
  if [ "$#" -gt 0 ]; then
    shift
  fi

  case "$command" in
  rehash|shell)
    eval "$(pyenv "sh-$command" "$@")";;
  *)
    command pyenv "$command" "$@";;
  esac
}

# reload-browser - A cross-platform wrapper for reloading the current
# browser tab
# Eric Radman, 2014
# http://entrproject.org/
reload-browser() {

    usage() {
            case `uname` in
            Darwin)
                    # applescript needs the exact title
                    echo "Usage: reload-browser Firefox [Safari \"Google Chrome\" ...]"
                    ;;
            *)
                    # xdotool uses regular expressions
                    echo "Usage: reload-browser Firefox [Chrome ...]"
                    ;;
            esac
            return 1
    }

    [ $# -lt 1 ] && usage;

    for app in "$@";
    do
            case `uname` in
            Darwin)
                    /usr/bin/osascript <<< "
                    set prev to (path to frontmost application as text)
                    tell application \"$app\"
                            activate
                    end tell
                    tell application \"System Events\"
                            keystroke \"r\" using {command down}
                            delay 0.3
                    end tell
                    activate application prev
                    "
                    ;;
            *)
                    xdotool search --onlyvisible --class "$app" windowfocus key \
                        --window %@ 'ctrl+r' || {
                            1>&2 echo "unable to signal an application named \"$app\""
                    }
                    ;;
            esac
    done
}

function trim {
    case `uname` in
        Darwin)
            sed -i '' 's/ *$//' $*
            ;;
        *)
            sed -i 's/ *$//' $*
            ;;
    esac
}
