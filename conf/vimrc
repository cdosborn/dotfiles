" Set up plugins
set  nocompatible
filetype plugin indent on
syntax on

" Install plugin manager if it doesn't exist
if !filereadable(glob('~/.vim/autoload/plug.vim'))
    call system('curl -sSLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim')
    source ~/.vim/autoload/plug.vim
endif

" vim-closetag
let g:closetag_filenames = '*.html,*.jsx,*.js'

call plug#begin()

" Using git URL
Plug 'alvan/vim-closetag'
Plug 'shime/vim-livedown'
Plug 'mattboehm/vim-unstack'
Plug 'rking/ag.vim'
Plug 'millermedeiros/vim-esformatter'
Plug 'nvie/vim-flake8'
Plug 'PeterRincker/vim-argumentative'
Plug 'kana/vim-textobj-user'
Plug 'rbonvall/vim-textobj-latex'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-github-dashboard'
Plug 'jeetsukumaran/vim-indentwise'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-eunuch'
Plug 'yssl/TWcmd.vim'
Plug 'ntpeters/vim-better-whitespace'

call plug#end()

" Install/update all plugins
if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
    PlugInstall --sync | q
endif

" Load :Man plugin
source $VIMRUNTIME/ftplugin/man.vim

" Fuzzy search files
nnoremap // :CtrlP<CR>
let g:ctrlp_custom_ignore = {
  \ 'dir':  '^node_module$',
  \ }
let g:ctrlp_working_path_mode='wra'
if executable('ag')
    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects
    " .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif
nnoremap <Leader>b :ls<CR>:sbuffer!<Space>
nnoremap ,e :e <C-R>=expand("%:p:h") . "/" <CR>

nnoremap _ 10<C-W>-
nnoremap + 10<C-W>+
nnoremap ) 10<C-W>>
nnoremap ( 10<C-W><

" Better goto file
"nnoremap gf :exec ":exec \":sb \" . expand(\"<cfile>\")"<CR>

nnoremap <silent> <C-L> <C-W>l
nnoremap <silent> <C-H> <C-W>h
nnoremap <silent> <C-J> <C-W>j
nnoremap <silent> <C-K> <C-W>k
nnoremap <silent> <C-W>v :rightbelow vs<CR>

function! s:nnoreicmap(option, shortcut, command)
    execute 'nnoremap '.a:option.' '.a:shortcut.' '.a:command
    execute 'imap '.a:option.' '.a:shortcut.' <Esc>'.a:shortcut
    execute 'cmap '.a:option.' '.a:shortcut.' <Esc>'.a:shortcut
endfunction

" window moving
call s:nnoreicmap('','<A-l>',':TWcmd wmv l<CR>')
call s:nnoreicmap('','<A-h>',':TWcmd wmv h<CR>')
call s:nnoreicmap('','<A-j>',':TWcmd wmv j<CR>')
call s:nnoreicmap('','<A-k>',':TWcmd wmv k<CR>')

" Select last paste, kinda like gv
nnoremap gp `[v`]

" Add the (e)x(ecute) macro
let @x = 'm`v$""y@"``'
let @v = '0/[{}]V%o'
" In js console.log the expression under the cursor
let @i = '/\w[a-zA-Z0-9.-_]\+N:nohgn'
let @l = 'yOconsole.log("\]pa", \]pa);\'
" Reset search register
let @/ = ''

" Substitute word under cursor
nnoremap <Leader>s :%s:\<<C-r><C-w>\>::gc<Left><Left><Left>


" The bindings below ought to be <M-...>, this is specific to 0SX
cnoremap <C-[>b <S-Left>
cnoremap <C-[>f <S-Right>

nnoremap <Space> :w<CR>
"quit each tab
nnoremap Q ZQ

" Insert a file specific debug statement
" See dotfiles/autoload/debug.vim
map <silent> -db :call debug#InsertDebugStatement()<CR>
nnoremap <silent> -gs :Gstatus<CR>
"Yank the current buffer full path to clipboard
nnoremap <silent> -yp :let @" = expand("%:p")<CR>
nnoremap <silent> -yf m`ggVG""y``
nnoremap <silent> -cp :let @* = expand("%:p")<CR>
nnoremap <silent> -cf m`ggVG"*y``
nnoremap <silent> -cf m`ggVG"*y``
nnoremap <silent> -td <C-W>T:Gvdiff<CR>
nnoremap -ms :mksession! .session.vim<CR>
nnoremap -mx :!chmod +x %<CR>
nnoremap -mk :make<CR>
nnoremap <silent> -mc :exe ":!ctags -f .tags -R * "<CR><CR>
nnoremap -ss :source .session.vim<CR>
nnoremap -sf :w \| so %<CR>
nnoremap -su :%s:\<<C-r><C-w>\>::gc<Left><Left><Left>
nnoremap -ag :Ag <cword><CR>
nnoremap -sp `[v`]
vnoremap <silent> -tb :!column -t<CR>

" re(fresh)
nnoremap -re :normal! <C-V><C-L><CR>
nnoremap <silent> -dt :call setline(".", strftime("%m/%d/%y"))<CR>

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap -a <Plug>(EasyAlign)

" v(imrc)
nnoremap -sv :source $MYVIMRC<CR>
" s(hell)
" nnoremap <silent> -va :set wiw=20 \| only \| vertical all \| set wiw=9999<CR>
" nnoremap <silent> -sa :only \| all<CR>
" nnoremap <silent> -va :only \| vertical all<CR>
nnoremap <silent> -sa :only \| all<CR>
nnoremap -va <C-W>L:windo<space>normal<space><C-V><C-W>H<CR>
nnoremap -sa <C-W>J:windo<space>normal<space><C-V><C-W>K<CR>
nnoremap <silent> -sh :!clear && bash;<CR>
nnoremap <silent> -sx :Sex<CR>
nnoremap <silent> -ev :vsp $MYVIMRC<CR>
nnoremap <silent> -ec :sp ~/.vim/colors/uncolor.vim<CR>
" t(rim) whitespace
nnoremap <silent> -tr m`:%s:\s*$::g<CR>``

" Settings
" set autochdir
set autoindent
set autoread
set backspace=indent,eol,start
set backupcopy=yes
set display=lastline
set expandtab
set foldenable
set history=1000
set hlsearch
set incsearch
" Disable the extra spaces vim introduces after sentence terminating
" punctuation.
set nojoinspaces
set laststatus=2
set listchars=eol:Â¬
set noswapfile
set pastetoggle=<F2>
set ruler
set shiftwidth=4
set showcmd
set showmode
set softtabstop=4
set switchbuf=useopen,usetab
set suffixesadd=.js,.jsx
set sessionoptions=blank,tabpages,buffers,curdir,folds,help,options,winsize
set tags=.tags
set textwidth=78
set undofile
set virtualedit=all
set wildmenu
set wildmode=longest:full
set winminwidth=1

" This purpoteldy allows running shell aliases/functions, but forces vim to
" background, needs more futzing
" set shell=bash\ --login
" set shellcmdflag=-ic "Allow aliases to be ran from !commands"

if !isdirectory($HOME . "/.vim/backup")
   call mkdir($HOME . "/.vim/backup", "p")
endif
set backupdir=~/.vim/backup
if !isdirectory($HOME . "/.vim/undo")
   call mkdir($HOME . "/.vim/undo", "p")
endif
set undodir=~/.vim/undo
if filereadable(glob('~/.vim/colors/uncolor.vim'))
    colorscheme uncolor
endif

" set statusline=\ %F%#Modified#\ %M%*%=%-14.(%l,%c%V%)\ %P\
" set tabline=%!MyTabLine()
" function! MyTabLine()
"   let s = ''
"   for i in range(tabpagenr('$'))
"     " select the highlighting
"     if i + 1 == tabpagenr()
"       let s .= '%#TabLineSel#'
"     else
"       let s .= '%#TabLine#'
"     endif

"     " set the tab page number (for mouse clicks)
"     let s .= '%' . (i + 1) . 'T'

"     " the label is made by MyTabLabel()
"     let s .= ' ' . (i + 1) . ' '
"   endfor

"   " after the last tab fill with TabLineFill and reset tab page nr
"   let s .= '%#TabLineFill#%T'

"   " right-align the label to close the current tab page
"   if tabpagenr('$') > 1
"     let s .= '%=%#TabLine#%999X'
"   endif

"   return s
" endfunction

" autocmd BufWritePost *.js silent %!prettier
function! Prettier()
   let save_pos = getpos(".")
   silent! %!prettier
   call setpos(".", save_pos)

   "Force a redraw, :redraw would show buffer has faving changes when there
   "were no changes
   normal! <C-V><C-L><CR>
endfunction
function! EsLintAll()
   set makeprg=./node_modules/eslint/bin/eslint.js\ -c\ .eslintrc\ --ext\ .jsx,.js\ --no-eslintrc\ --format\ unix\ --fix\ src
   make
endfunction
function! EsLint()
   " set makeprg=./node_modules/eslint/bin/eslint.js\ -c\ .eslintrc\ --ext\ .jsx,.js\ --no-eslintrc\ --format\ unix\ --fix\ %
   " make
   silent cexpr system('./node_modules/eslint/bin/eslint.js -c .eslintrc --ext .jsx,.js --no-eslintrc --format unix --fix ' . expand('%'))

   " Since eslint will change the buffer, manually reload the file
   silent execute 'open ' . expand('%')

   " Reprint the message of the current error
   cc
endfunction
function! Prospector()
   set makeprg=prospector\ -I\ create_as.py\ -I\ add_access.py\ --output\ pylint\ %
   make
endfunction
function! ProspectorAll()
   set makeprg=prospector\ --profile\ prospector_profile.yaml\ -I\ create_as.py\ -I\ add_access.py\ --output\ pylint
   make
endfunction

" Source my vimrc when file changes
augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

" Auto strip whitespace 'ntpeters/vim-better-whitespace'
augroup clean_whitespace
    autocmd!
    autocmd BufEnter * EnableStripWhitespaceOnSave
augroup END


augroup disable_auto_commenting
    " Disable auto commenting
    autocmd!
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
augroup END

if system("uname") =~ "Linux"
    let g:livedown_browser = "vivaldi"
endif

command! GFollow execute 'file '.fnameescape(resolve(expand('%:p')))<bar>
    \ call fugitive#detect(fnameescape(expand('%:p:h')))
