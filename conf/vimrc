" Set up plugins
set  nocompatible
filetype plugin indent on
syntax on

call plug#begin()

" Using git URL
Plug 'git://github.com/shime/vim-livedown.git'
Plug 'https://github.com/rking/ag.vim.git'
Plug 'millermedeiros/vim-esformatter'
Plug 'nvie/vim-flake8'
Plug 'git://github.com/PeterRincker/vim-argumentative.git'
Plug 'git://github.com/tpope/vim-commentary.git'
Plug 'https://github.com/tpope/vim-fugitive.git'
Plug 'kana/vim-textobj-user'
Plug 'rbonvall/vim-textobj-latex'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'junegunn/vim-easy-align'

call plug#end()

" Load :Man plugin
source $VIMRUNTIME/ftplugin/man.vim

" Fuzzy search files
nnoremap // :CtrlP<CR>
let g:ctrlp_custom_ignore = {
  \ 'dir':  '^node_module$',
  \ }
let g:ctrlp_working_path_mode='wra'
if executable('ag')
    " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects
    " .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif
nnoremap <Leader>b :ls<CR>:sbuffer!<Space>
nnoremap ,e :e <C-R>=expand("%:p:h") . "/" <CR>

" Jump to the next or previous line that has the same level or a lower
" level of indentation than the current line.
"
" exclusive (bool): true: Motion is exclusive
" false: Motion is inclusive
" fwd (bool): true: Go to next line
" false: Go to previous line
" lowerlevel (bool): true: Go to line with lower indentation level
" false: Go to line with the same indentation level
" skipblanks (bool): true: Skip blank lines
" false: Don't skip blank lines
function! NextIndent(exclusive, fwd, lowerlevel, skipblanks)
  let line = line('.')
  let column = col('.')
  let lastline = line('$')
  let indent = indent(line)
  let stepvalue = a:fwd ? 1 : -1
  while (line > 0 && line <= lastline)
    let line = line + stepvalue
    if ( ! a:lowerlevel && indent(line) == indent ||
          \ a:lowerlevel && indent(line) < indent)
      if (! a:skipblanks || strlen(getline(line)) > 0)
        if (a:exclusive)
          let line = line - stepvalue
        endif
        exe line
        exe "normal " column . "|"
        return
      endif
    endif
  endwhile
endfunction

" Moving back and forth between lines of same or lower indentation.
nnoremap <silent> [l :call NextIndent(0, 0, 0, 1)<CR>
nnoremap <silent> ]l :call NextIndent(0, 1, 0, 1)<CR>
vnoremap <silent> [l <Esc>:call NextIndent(0, 0, 0, 1)<CR>m'gv''
vnoremap <silent> ]l <Esc>:call NextIndent(0, 1, 0, 1)<CR>m'gv''
onoremap <silent> [l :call NextIndent(0, 0, 0, 1)<CR>
onoremap <silent> ]l :call NextIndent(0, 1, 0, 1)<CR>

nnoremap _ 10<C-W>-
nnoremap + 10<C-W>+
nnoremap ) 10<C-W>>
nnoremap ( 10<C-W><

" Better goto file
"nnoremap gf :exec ":exec \":sb \" . expand(\"<cfile>\")"<CR>

"nnoremap <silent> <C-J> <C-W><C-J>:exe 'resize +1000 \| vertical resize +1000'<CR>
"nnoremap <silent> <C-K> <C-W><C-K>:exe 'resize +1000 \| vertical resize +1000'<CR>
"nnoremap <silent> <C-L> <C-W><C-L>:exe 'resize +1000 \| vertical resize +1000'<CR>
"nnoremap <silent> <C-H> <C-W><C-H>:exe 'resize +1000 \| vertical resize +1000'<CR>
nnoremap <silent> <C-L> <C-W>l
nnoremap <silent> <C-H> <C-W>h
nnoremap <silent> <C-J> <C-W>j
nnoremap <silent> <C-K> <C-W>k
nnoremap <silent> <C-W>v :rightbelow vs<CR>

" Select last paste, kinda like gv
nnoremap gp `[v`]

" Add the (e)x(ecute) macro
let @x = 'm`v$""y@"``'
let @v = '0/[{}]V%o'
" In js console.log the expression under the cursor
let @i = '/\w[a-zA-Z0-9.-_]\+N:nohgn'
let @l = 'yOconsole.log("\]pa", \]pa);\'
" Reset search register
let @/ = ''

" Substitute word under cursor
nnoremap <Leader>s :%s:\<<C-r><C-w>\>::gc<Left><Left><Left>


" The bindings below ought to be <M-...>, this is specific to 0SX
cnoremap <C-[>b <S-Left>
cnoremap <C-[>f <S-Right>

nnoremap <Space> :w<CR>
"quit each tab
nnoremap Q ZQ
""center when jumping to next search
"nnoremap n nzz
""center when jumping to prev search
"nnoremap N Nzz
"nnoremap # #zz
"nnoremap * *zz
"nnoremap g; g;zz
"nnoremap g, g,zz
"Yank the current buffer full path to clipboard
nnoremap <silent> -gs :Gstatus<CR>
nnoremap <silent> -yp :let @" = expand("%:p")<CR>
nnoremap <silent> -yf m`ggVG""y``
nnoremap <silent> -cp :let @* = expand("%:p")<CR>
nnoremap <silent> -cf m`ggVG"*y``
nnoremap <silent> -cf m`ggVG"*y``
nnoremap -mn :Man<space>
nnoremap -ms :mksession! .session.vim<CR>
nnoremap -mx :!chmod +x %<CR>
nnoremap -mk :make<CR>
nnoremap <silent> -mc :exe ":!ctags -f .tags -R * "<CR><CR>
nnoremap -ss :source .session.vim<CR>
nnoremap -sf :w \| so %<CR>
nnoremap -su :%s:::gc<Left><Left><Left><Left>
nnoremap -ag :Ag <cword><CR>
nnoremap -sp `[v`]
vnoremap <silent> -tb :!column -t<CR>
vnoremap ! :w !

" re(fresh)
nnoremap -re :normal! <CR>
nnoremap <silent> -dt :call setline(".", strftime("%m/%d/%y"))<CR>

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap -a <Plug>(EasyAlign)

" v(imrc)
nnoremap -sv :source $MYVIMRC<CR>
" s(hell)
" nnoremap <silent> -va :set wiw=20 \| only \| vertical all \| set wiw=9999<CR>
" nnoremap <silent> -sa :only \| all<CR>
" nnoremap <silent> -va :only \| vertical all<CR>
nnoremap <silent> -sa :only \| all<CR>
nnoremap -va <C-W>L:windo<space>normal<space><C-V><C-W>H<CR>
nnoremap -sa <C-W>J:windo<space>normal<space><C-V><C-W>K<CR>
nnoremap <silent> -sh :!clear && bash;<CR>
nnoremap <silent> -sx :Sex<CR>
nnoremap <silent> -ev :vsp $MYVIMRC<CR>
nnoremap <silent> -ec :sp ~/.vim/colors/uncolor.vim<CR>
" t(rim) whitespace
nnoremap <silent> -tr m`:%s:\s*$::g<CR>``
nnoremap <silent> -tp :TernDefPreview<CR>

" Settings
" set autochdir
set autoindent
set autoread
set backspace=indent,eol,start
set backupcopy=yes
set display=lastline
set expandtab
set foldenable
set history=1000
set hlsearch
set incsearch
set laststatus=2
set noswapfile
set pastetoggle=<F2>
set ruler
set shiftwidth=4
set showcmd
set showmode
set softtabstop=4
set switchbuf=useopen,usetab
set suffixesadd=.js,.jsx
set sessionoptions=blank,tabpages,buffers,curdir,folds,help,options,winsize
set tags=.tags
set textwidth=78
set undofile
set virtualedit=all
set wildmenu
set wildmode=longest:full
set winminwidth=1
if exists("&backupdir")
    set backupdir=~/.vim/backups
endif
if exists("&undodir")
    set undodir=~/.vim/undo
endif
colorscheme uncolor

" Disable auto commenting
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

set statusline=\ %F%#Modified#\ %M%*%=%-14.(%l,%c%V%)\ %P\
set tabline=%!MyTabLine()
function! MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    " select the highlighting
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif

    " set the tab page number (for mouse clicks)
    let s .= '%' . (i + 1) . 'T'

    " the label is made by MyTabLabel()
    let s .= ' ' . (i + 1) . ' '
  endfor

  " after the last tab fill with TabLineFill and reset tab page nr
  let s .= '%#TabLineFill#%T'

  " right-align the label to close the current tab page
  if tabpagenr('$') > 1
    let s .= '%=%#TabLine#%999X'
  endif

  return s
endfunction

" Source my vimrc when file changes
augroup reload_vimrc " {
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }
