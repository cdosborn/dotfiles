#!/bin/bash

# Print the smallest graph from these endpoints
#
# git graph <commit>...
#
main() {
    local commits=();
    if [[ $# -eq 0 ]]; then
        echo 'git graph <commit>...';
        return 0;
    elif [[ $# -eq 1 ]]; then
        commits=( "$1" HEAD );
    else
        commits=( $@ );
    fi

    local MERGE_PARENTS=${commits[@]}
    local MERGE_BASE=$(oldest-merge-base $MERGE_PARENTS)
    git log \
        --first-parent --graph --decorate --oneline \
        --format=format:'%C(black)%h%C(reset) %C(auto)%d%C(reset) %C(white)%s %C(reset)' \
        "^$MERGE_BASE~1" $MERGE_PARENTS;
}

oldest-merge-base() {
    local COMMON_ANCESTOR="" endpoint1 endpoint2;
    endpoint1=$1;
    while [[ $# -gt 1 ]]; do
        shift;
        endpoint2=$1;

        while read sha1 <&3  && read sha2 <&4
        do
            if [ "$sha1" == "$sha2" ]; then
                COMMON_ANCESTOR="$sha1";
            else
                # Break at the first occurence where the history diverged
                break;
            fi;

        done 3< <(git rev-list --reverse --first-parent "$endpoint1") 4< <(git rev-list --reverse  --first-parent "$endpoint2")

        endpoint1=$COMMON_ANCESTOR;
    done

    echo $COMMON_ANCESTOR;
}

# git bash-completion.sh will use this function to provide completion
_git_graph()
{
      # you can return anything here for the autocompletion for example all
      # the branches
        __gitcomp_nl "$(__git_refs)"
}

main $@

