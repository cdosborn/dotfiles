#!/bin/bash

usage() {
    echo 'Print the smallest graph from these endpoints';
    echo '';
    echo 'git graph [-w|--watch] <commit>...';
}

main() {
    local REFS=();
    if [[ $# -eq 0 ]]; then
        usage
        return 0;
    elif [[ $# -eq 1 ]]; then
        REFS=( "$1" HEAD );
    else
        REFS=( $@ );
    fi

    if [[ "$1" =~ ^(-w|--watch)$ ]]; then
        while true; do
	    {
		find .git/ -maxdepth 1 -type f;
		echo .git/refs/heads/*;
	    } | entr -cd draw-graph ${REFS[@]};
	done
    else
        draw-graph ${REFS[@]}
    fi
}

draw-graph() {
    local MERGE_TIPS=$1;
    local MERGE_BASE=$(oldest-merge-base $MERGE_TIPS);

    # Set the GRAPH_BASE to be the ancestor of the merge base. If the ancestor
    # doesn't exist then use just the merge base
    local MERGE_BASE_ANCESTOR=$(git rev-parse --quiet --verify $MERGE_BASE~1^{commit});
    local GRAPH_BASE;
    if [ -n $MERGE_BASE_ANCESTOR ]; then
        GRAPH_BASE=$MERGE_BASE_ANCESTOR
    else
        GRAPH_BASE=$MERGE_BASE
    fi


    echo git log \
        --graph --decorate --oneline \
        --format=format:'%C(black)%h%C(reset)%C(auto)%d%C(reset) %C(white)%<(50,trunc)%s %C(reset)' \
        "^$GRAPH_BASE" $MERGE_TIPS;
}

oldest-merge-base() {
    local COMMON_ANCESTOR="" endpoint1 endpoint2;
    endpoint1=$1;
    while [[ $# -gt 1 ]]; do
        shift;
        endpoint2=$1;

        while read sha1 <&3  && read sha2 <&4
        do
            if [ "$sha1" == "$sha2" ]; then
                COMMON_ANCESTOR="$sha1";
            else
                # Break at the first occurence where the history diverged
                break;
            fi;

        done 3< <(git rev-list --reverse --first-parent "$endpoint1") 4< <(git rev-list --reverse  --first-parent "$endpoint2")

        endpoint1=$COMMON_ANCESTOR;
    done

    echo $COMMON_ANCESTOR;
}

# Source this function to leverage git-bash-completion.sh with git graph
# _git_graph()
# {
#       # you can return anything here for the autocompletion for example all
#       # the branches
#       __gitcomp_nl "$(__git_refs)"
# }

main $@;
